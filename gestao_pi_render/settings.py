"""
Django settings for gestao_pi_render project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Chave secreta - OBRIGATÓRIO configurar como variável de ambiente no Render
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# DEBUG = False em produção! Configure como variável de ambiente no Render.
DEBUG = os.environ.get('DJANGO_DEBUG', 'false').lower() == 'true'

# ALLOWED_HOSTS: Configure com o seu domínio do Render e domínios customizados.
# Ex: ['seu-app.onrender.com', '[www.seudominio.com](https://www.seudominio.com)']
ALLOWED_HOSTS_STRING = os.environ.get('DJANGO_ALLOWED_HOSTS')
if ALLOWED_HOSTS_STRING:
    ALLOWED_HOSTS = ALLOWED_HOSTS_STRING.split(',')
else:
    ALLOWED_HOSTS = []

# Em desenvolvimento, permita localhost e o host do Render (se já souber)
# Adiciona o hostname externo do Render automaticamente se estiver no ambiente Render
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Se DEBUG for True localmente, adicione localhost
if DEBUG and not RENDER_EXTERNAL_HOSTNAME: # Evita adicionar localhost em produção no Render
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # WhiteNoise para servir estáticos (antes de staticfiles)
    'django.contrib.staticfiles',
    'rest_framework',  # Django REST Framework
    'core',            # Nossa aplicação 'core'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # WhiteNoise Middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ... (ROOT_URLCONF, TEMPLATES, WSGI_APPLICATION permanecem os mesmos) ...

ROOT_URLCONF = 'gestao_pi_render.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Diretório de templates a nível de projeto (opcional)
        'APP_DIRS': True, # Procura templates dentro das apps
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gestao_pi_render.wsgi.application'


# Database
# https://docs.djangoproject.com/en/stable/ref/settings/#databases
# Usando SQLite para desenvolvimento local
# Database: Configuração para Render (PostgreSQL) usando DATABASE_URL
# E fallback para SQLite se DATABASE_URL não estiver definida (desenvolvimento local)
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(
            conn_max_age=600, # Segundos que a conexão pode persistir
            conn_health_checks=True,
            ssl_require=os.environ.get('DJANGO_DB_SSL_REQUIRE', 'True').lower() == 'true' # Geralmente True para Render DBs
        )
    }
else: # Configuração local para SQLite (desenvolvimento)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# Para deploy no Render com PostgreSQL, esta seção será modificada (veremos depois)



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ... (padrão do Django)

# https://docs.djangoproject.com/en/5.2/topics/i18n/
# Internationalization
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo' # Ajuste para seu fuso horário
USE_I18N = True
USE_TZ = True


# https://docs.djangoproject.com/en/5.2/howto/static-files/
# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
# Diretório onde `collectstatic` irá juntar todos os arquivos estáticos para produção
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static') # Novo local para build
STATICFILES_DIRS = [
    BASE_DIR / "static", # Diretório para arquivos estáticos a nível de projeto
]

# Configuração do WhiteNoise para armazenamento de estáticos em produção
# Garante que o WhiteNoise possa encontrar os arquivos após o collectstatic
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# CSRF Trusted Origins (importante para POST requests de domínios diferentes)
CSRF_TRUSTED_ORIGINS_STRING = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS')
if CSRF_TRUSTED_ORIGINS_STRING:
    CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS_STRING.split(',')
else:
    CSRF_TRUSTED_ORIGINS = []

# Adiciona o host do Render aos CSRF_TRUSTED_ORIGINS se estiver no ambiente Render
# e o frontend estiver no mesmo domínio ou subdomínio.
# Se o frontend estiver em um domínio diferente, adicione-o explicitamente.
# Se o seu frontend (se houver um separado) estiver em outro domínio no Render:
# Ex: CSRF_TRUSTED_ORIGINS.append('[https://seu-frontend.onrender.com](https://seu-frontend.onrender.com)')

# Logging (opcional, mas bom para produção)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
